apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: spring-boot-api-consumer-template
  title: Spring Boot REST consumer
  description: Create a simple REST consumer
spec:
  owner: service@example.com
  type: service
  
  parameters:
    - title: API consumer parameters
      required:
        - component_id
        - owner
        - java_package_name
        - application
        - description
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
        java_package_name:
          title: Java Package Name
          type: string
          description: Name for the java package. eg (io.backstage.blah)
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds: 
              - Group
        application:
          title: System
          type: string
          description: System to which this Component belongs
          ui:field: OwnedEntityPicker
          ui:options:
            allowedKinds:
            - System       
    - title: Choose a location  
      required:
        - repoUrl
      properties: 
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - janus-api-idp  

  steps:
    - id: template
      name: Code Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender: []
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          artifact_id: ${{ parameters.component_id }}
          java_package_name: ${{ parameters.java_package_name }}
          owner: ${{ parameters.owner }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          http_port: 8080
          application: ${{ parameters.application }}
          

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}
        repoVisibility: public
        deleteBranchOnMerge: true
        access: janus-api-idp/${{ parameters.owner }}
        baseURL: control-cluster-raffa.demo.red-chesterfield.com
        protectDefaultBranch: false        

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '${{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

    - id: template-tenant-gitops 
      name: tenant Argcd Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./app-gitops
        copyWithoutRender: []
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          artifact_id: ${{ parameters.component_id }}
          java_package_name: ${{ parameters.java_package_name }}
          owner: ${{ parameters.owner }}
          application: ${{ parameters.application }}
          organization: janus-api-idp
          team: ${{ parameters.owner }}
          repo_id: ${{ parameters.component_id }}
        targetPath: ./tenant-gitops          

    - id: pull-request
      name: make a pr with the new argocd
      action: publish:github:pull-request
      input:
        repoUrl: github.com?repo=${{ parameters.application.split(":")[1] }}-gitops&owner=janus-api-idp
        branchName: ${{ parameters.component_id }}
        title: argocd apps for ${{ parameters.component_id }}
        description: argocd apps ${{ parameters.component_id }}
        sourcePath: ./tenant-gitops  

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
